% Haskell : OMG, où sont passées mes boucles ?!
% Yves Parès
% Lundi 14 janvier

## Rappels : boucles & récursion

### 2 types de récursion :
- terminale : seul l'appel *terminal* construit un résultat, les autres ne font que renvoyer le résultat de l'appel récursif
- non terminale : les appels non terminaux réutilisent le résultat de l'appel récursif

Si compilateur capable de *Tail Call Optimization*, la récursion **terminale** se fait en espace mémoire constant (vs. *linéaire*), comme une boucle.

\pause{}

### Donc :
- Récursion plus bas niveau que boucles
- Récursion terminale + TCO <=> boucle (unique différence : syntaxe)

## Inconvénients généraux des boucles

- Éléments syntaxiques spéciaux ( *for*, *while*, *for in*, *list comprehensions*...) : capacités limitées par le langage
- Les boucles ne sont pas composables
- Une boucle spécifique n'est pas réutilisable
- Pas utilisables pour créer des abstractions

(contrairement aux fonctions, récursives ou non)

\pause{}

### Conséquences :
- Toute abstraction d'un patron ( *pattern* ) donné de répétition ou d'itération doit être assumée par les développeurs du langage.
- Créer une nouvelle abstraction nécessite de modifier le langage.

## Inconvénients de la récursion dans les langages impératifs

- Pour être réellement utile, nécessite le support natif des *closures* : fonctions de première classe (fonctions sont des valeurs) ou "blocs" de code
- Syntaxe généralement mal adaptée : pas de fonctions anonymes ("lambdas") notamment

### Conséquence :
Récursion souvent vue comme trop compliquée.

Mais récursion plus *formelle* et plus expressive que boucles.

## Un peu de démystification :

_"Haskell fans are funny. They pride themselves that Haskell has no while-loops [...] They tell you to define **everything** using recursive functions [...]"_

-- Guido van Rossum\footnote{https://plus.google.com/u/0/115212051037621986145/posts/9bQZudT42Gx}.

\pause{}

**FAUX !**

## Un peu de démystification :

- Le but **n'est pas** : de remplacer individuellement chaque boucle par une récursion (sinon, pas d'intérêt) :

### En C
```c
int sum_array(int* ptr, size_t size) {
    int acc = 0, i;
    for(i = 0; i < size; ++i) {
        acc += ptr[i]; }}
```

### En Haskell
```haskell
sumList :: [Int] -> Int
sumList list = recur 0 list
    where recur !acc []     = acc
          recur !acc (x:xs) = recur (acc+x) xs
```

## Un peu de démystification :

- Le but est : d'écrire *une fois pour toutes* un patron de récursion donné (sous forme d'une fonction) et de le réutiliser.
- Donc, il est assez rare d'écrire une récursion *ad-hoc* manuellement.
- Pour ce faire, les closures et la syntaxe aident.

## Patrons de récursion les plus communs

- **map** : transformer une collection en une autre ayant la même structure, en appliquant la même fonction à chaque élément
- **filter** : transformer une collection en une autre ne contenant que les éléments satisfaisant un prédicat
- **fold** (ou *reduce*) : "réduire" une collection en accumulant ses éléments dans une seule valeur (exemple : somme des éléments d'une liste)

**fold** plus général : permet d'exprimer **map** et **filter** (dans ce cas, la valeur finale est elle-même une collection)

## La fonction **map**

### Code de **map**
```haskell
map f []     = []
map f (x:xs) = (f x) : (map f xs)
{-                     ^^^^^^^^^^ Le résultat de l'appel
                                  récursif est réutilisé...
               ^^^^^^^^^^^^^^^^^^ ...dans cette expression
-}
```

\pause{}

### Observations
- Réalise une récursion **non** terminale.
- Mais pourquoi, vu qu'on a dit qu'une récursion terminale c'était tellement vachement mieux ?!

## Intérêt de la récursion **non** terminale en Haskell

### Rappels
- Récursion **non** terminale => chaque appel peut construire une nouvelle valeur de retour, au lieu de renvoyer directement le résultat de l'appel récursif
- Haskell : langage non-strict => pas nécessaire d'évaluer **toute** une expression si on ne veut qu'une *partie* du résultat

\pause{}

### Conséquence :
```haskell
map f (x:xs) = (f x) : (map f xs)
```

- ```(map f xs)``` n'est pas calculé tant que seul ```(f x)``` nous intéresse.
- La récursion est "mise en pause" => *guarded recursion*.
- Avec récursion **terminale** : **map** consommerait *toute* la liste en entrée avant de pouvoir renvoyer quoi que ce soit.

## _Fold_ sur une liste : deux versions en Haskell

**foldl** et **foldr**, qui prennent tous deux :

- Une valeur ```z``` qui "initialise" l'accumulateur
- Une fonction ```f``` de deux arguments, qui sera appelée pour chaque élément dans la liste, avec la valeur actuelle de l'accumulateur, et renvoie la nouvelle valeur de l'accumulateur

La différence entre les deux :

- **foldl** : récursif terminal
- **foldr** : récursif non terminal (peut donc renvoyer un résultat partiel)

(Note : **foldl** a une variante, **foldl'**, qui force l'évaluation de l'accumulateur entre chaque appel de ```f```)

## Utilité de **foldl**

Puisqu'en fait c'est la récursion **non** terminale qui est vachement mieux, à quoi sert **foldl** ?

\pause{}

=> Sert si résultat final *indivisible*, donc si liste en entrée doit *de toutes façons* être consommée entièrement.

Exemple : pas possible de calculer une partie de la somme des éléments d'une liste.

```haskell
sumList2 :: [Int] -> Int
sumList2 list = foldl (+) 0 list
```

## Profiling

Outil utile (par exemple) pour savoir si on fait le bon type de récursion :
le *profiler*.

### Intérêt général
- Enregistrer la consommation temps/mémoire lors de l'exécution
- Donner des statistiques temps/mémoire détaillées pour chaque "partie" du programme (par ex. fonctions)
- Indiquer quelles "parties" sont intéressantes à optimiser
- => Enregistrer les "parties" du programme traversées, façon "stack trace" (utile pour débuggage)

\pause{}

### Terminologie
"Partie" du programme = "*Cost Centre*" (un par fonction par ex., mais possible d'avoir granularité encore plus fine)

## Profiling

### Requis
- Avoir installé les librairies utilisées compilées avec profiling activé (Par ex. via ```apt-get install haskell-platform-prof```)
- Compiler le programme avec les bonnes options :
    - activer les optimisations (```-O2```)
    - activer le mode profiling (```-prof```)
    - lui dire où placer les _Cost Centres_ (```-fprof-auto``` par ex.)
- Indiquer au _runtime_ de générer un fichier de statistiques (```+RTS -p``` par ex.)

\pause{}

=> TP !

